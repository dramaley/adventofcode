#!/usr/bin/perl

use 5.8.1;
use strict;
use utf8;                               # Source contains UTF-8
use open ':std', ':encoding(UTF-8)';    # Terminal supports UTF-8
use warnings 'all';

our $iterations = 1000000000000;        # This number isn't sensible. Why?!

# Define rocks in a special format; for each one:
#   width of the rock (columns),
#   list of (row, col) coordinates of solid pieces
our @rocks = ([4, [0,0], [0,1], [0,2], [0,3]],          # Horizontal line; "-"
              [3, [0,1], [1,0], [1,1], [1,2], [2,1]],   # Plus shape; "+"
              [3, [0,0], [0,1], [0,2], [1,2], [2,2]],   # Reverse L; "⅃"
              [1, [0,0], [1,0], [2,0], [3,0]],          # Vertical line; "|"
              [2, [0,0], [0,1], [1,0], [1,1]]);         # Solid 2×2; "o"
our $rocks_max = scalar @rocks;

# There's only 1 line of input, but use map to chomp and split in 1 line, then
# convert "<" and ">" into increment values -1 and 1.
our @jet = map { /</ ? -1 : 1 } map { chomp; split // } <>;
our $jet_max = scalar @jet;

# Define our chamber, with a solid floor
our $width = 7;
our @chamber = ([(1) x $width]);
our @tallest = ((0) x $width);  # Height of the tallest rock in each column

my $jet_counter = 0;
my (%seen_hash, @seen_list);    # Used for cycle detection
BIGLOOP:
for (my $i = 0; $i < $iterations; $i++) {
    # Get the next rock
    my ($rock_cols, @rock_coords) = @{$rocks[$i % $rocks_max]};
    # Initial position of the rock
    my ($pos_row, $pos_col) = (@chamber + 3, 2);
    while (1) {
        # First process horizontal movement caused by jets of hot gas

        # Get the horizontal direction of the jet
        my $horiz = $jet[$jet_counter++ % $jet_max];
        # Cancel movement if it would cause the rock to go out of bounds
        $horiz = 0 if ($pos_col + $horiz < 0 or
                       $pos_col + $horiz + $rock_cols > $width);
        # Check if movement would cause the rock to hit something
        if ($horiz) {
            foreach (@rock_coords) {
                my ($row, $col) = @$_;
                $row += $pos_row;
                $col += $pos_col + $horiz;
                if (defined $chamber[$row] and $chamber[$row][$col]) {
                    # Found an intersection; cancel the movement
                    $horiz = 0;
                    last;
                }
            }
        }
        # Update the column with the horizontal movement
        $pos_col += $horiz;

        # Next process downward movement

        # Check if movement would cause the rock to hit something
        my $vert = -1;  # Vertical movement
        foreach (@rock_coords) {
            my ($row, $col) = @$_;
            $row += $pos_row + $vert;
            $col += $pos_col;
            if (defined $chamber[$row] and $chamber[$row][$col]) {
                # Found an intersection; cancel the movement
                $vert = 0;
                last;
            }
        }
        if ($vert) {
            # The rock is clear to move
            $pos_row += $vert;
        } else {
            # Rock intersected with something, so lock it down.
            foreach (@rock_coords) {
                my ($row, $col) = @$_;
                $row += $pos_row;
                $col += $pos_col;
                # Expand the chamber if it's not tall enough
                $chamber[$row] = [(0) x $width]
                    if not defined $chamber[$row];
                # Imprint the rock in the chamber structure
                $chamber[$row][$col] = 1;
                # Update @tallest
                $tallest[$col] = $row if $row > $tallest[$col];
            }
            last;   # Exit the while(1) loop
        }
    }
    # Keep $jet_counter from getting too big
    $jet_counter %= $jet_max;

    # Detect repetition so we don't have to simulate all the rocks
    {   # How far down from the top is the rock in each column
        my @deltas = map { $#chamber - $_ } @tallest;
        my $cycle_key = join('-', $jet_counter, ($i % $rocks_max), @deltas);

        # Save the info we need to calculate final height after cycle detection
        push @seen_list, $#chamber;

        # Try to detect a cycle
        if (exists $seen_hash{$cycle_key}) {
            # Cycle detected!
            my $prev = $seen_hash{$cycle_key};
            my $curr = $#seen_list;

            # Height of the chamber at each end of the cycle
            my $prev_height = $seen_list[$prev];
            my $curr_height = $#chamber;

            # How many complete cycles to reach the goal
            my $cycles = int(($iterations - $curr) / ($curr - $prev));
            # Remainder after the last full cycle
            my $remain = ($iterations - $curr) % ($curr - $prev);

            # Take the current chamber height
            my $final = $curr_height;
            # Add the complete cycles
            $final += $cycles * ($curr_height - $prev_height);
            # Handle the remainder
            $final += $seen_list[$prev + $remain] - $prev_height - 1;

            # Here's the answer!
            print "${final}\n";

            # Exit the loop rather than the entire program in case we want to
            # print the chamber or something.
            last BIGLOOP;
        } else {
            $seen_hash{$cycle_key} = $#seen_list;
        }
    }
}

# Print the chamber
#print map { "$_\t" . join('', map { tr/01/　⬛/; $_ } @{$chamber[$_]}) . "\n" } reverse 0..$#chamber;
