#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

# ------------------------------------------------------------------------------
#  Run the "Intcode computer". This variant accepts a hash reference with keys
#  for the computer memory, input, and instruction pointer. Hash contents will
#  be modified as the computer runs.
# ------------------------------------------------------------------------------
sub run {
    my ($href) = @_;
    my $memory   = $$href{'memory'};    # Array references, so just copy them.
    my $input    = $$href{'input'};
    my $inst_ptr = \$$href{'address'};  # These are scalars, so make references
    my $rel_base = \$$href{'base'};

    # Make sure these were initialized
    $$inst_ptr //= 0;
    $$rel_base //= 0;

    my @modes;      # Parameter modes, set as each opcode is processed
    my @output;     # Collect program output

    # Function to handle parameter modes
    my $pmode = sub {
        my ($moderef, $param) = @_;
        my $mode = $modes[$moderef];        # Look up the mode
        if ($mode == 0) {                   # "Position mode"
            return $$memory[$param] // 0;
        } elsif ($mode == 1) {              # "Immediate mode"
            return $param;
        } elsif ($mode == 2) {              # "Relative mode"
            return $$memory[$param + $$rel_base] // 0;
        } else {
            die "Bad mode: \"${mode}\"";
        }
    };
    # Handle relative mode offset when saving a value
    my $offset = sub {
        my ($moderef) = @_;
        return $modes[$moderef] // 0 == 2 ? $$rel_base : 0;
    };

    # Mapping of opcodes to implementation.
    my @opcodes = (
        # There is no opcode 0
        sub { die 'Invalid opcode 0'; },
        # Opcode 1, addition
        sub { $$memory[$_[2]+&$offset(2)] = &$pmode(0,$_[0]) + &$pmode(1,$_[1]);
              $$inst_ptr += 4; },
        # Opcode 2, multiplication
        sub { $$memory[$_[2]+&$offset(2)] = &$pmode(0,$_[0]) * &$pmode(1,$_[1]);
              $$inst_ptr += 4; },
        # Opcode 3, input
        sub { $$memory[$_[0]+&$offset(0)] = shift @$input; $$inst_ptr += 2; },
        # Opcode 4, output
        sub { push @output, &$pmode(0,$_[0]); $$inst_ptr += 2; },
        # Opcode 5, jump if true
        sub { if (&$pmode(0,$_[0]) != 0) { $$inst_ptr = &$pmode(1,$_[1]); }
              else { $$inst_ptr += 3; } },
        # Opcode 6, jump if false
        sub { if (&$pmode(0,$_[0]) == 0) { $$inst_ptr = &$pmode(1,$_[1]); }
              else { $$inst_ptr += 3; } },
        # Opcode 7, less than
        sub { $$memory[$_[2]+&$offset(2)] = int(&$pmode(0,$_[0]) < &$pmode(1,$_[1]));
              $$inst_ptr += 4; },
        # Opcode 8, equals
        sub { $$memory[$_[2]+&$offset(2)] = int(&$pmode(0,$_[0]) == &$pmode(1,$_[1]));
              $$inst_ptr += 4; },
        # Opcode 9, adjust the relative base offset
        sub { $$rel_base += &$pmode(0,$_[0]); $$inst_ptr += 2; },
        );

    while ($$memory[$$inst_ptr] != 99) {
        my $opcode = $$memory[$$inst_ptr] // 0;

        # Parse the parameter modes
        @modes = split //, reverse int($opcode / 100);
        $opcode %= 100;

        # Get parameters
        my (@params) = map { $_ // 0 } @$memory[$$inst_ptr+1..$$inst_ptr+3];

        # Execute this opcode
        &{$opcodes[$opcode]}(@params);
    }
    return @output;
}


# Get input
my (@memory) = map { int } split /,/, <>;

my %program = ('memory' => \@memory, 'input'  => [ 2 ]);
my (@output) = &run(\%program);
print map { "$_\n" } @output;
