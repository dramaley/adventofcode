#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

# ------------------------------------------------------------------------------
#  Run the "Intcode computer" and return the output. The computer now supports
#  multiple items of input and does not modify its arguments.
#  Takes 2 arguments: list references to program core memory (opcodes and
#  parameters), and to program input.
# ------------------------------------------------------------------------------
sub run {
    my ($aref1, $aref2) = @_;

    # Make local copies of the arguments so we can modify them.
    my (@pgm) = (@$aref1);
    my (@input) = (@$aref2);

    my @modes;      # Parameter modes, set as each opcode is processed
    my @output;     # Collect any program output
    my $addr = 0;   # Address pointer

    # Function to handle parameter modes
    my $pmode = sub {
        my ($moderef, $param) = @_;
        my $mode = $modes[$moderef] // 0;   # Look up the mode
        if ($mode == 0) {
            return $pgm[$param];            # "Position mode"
        } elsif ($mode == 1) {
            return $param;                  # "Immediate mode"
        } else {
            die "Bad mode: \"${mode}\"";
        }
    };

    # Mapping of opcodes to implementation.
    my @opcodes = (
        # There is no opcode 0
        undef,
        # Opcode 1, addition
        sub { $pgm[$_[2]] = &$pmode(0,$_[0]) + &$pmode(1,$_[1]); $addr += 4; },
        # Opcode 2, multiplication
        sub { $pgm[$_[2]] = &$pmode(0,$_[0]) * &$pmode(1,$_[1]); $addr += 4; },
        # Opcode 3, input
        sub { $pgm[$_[0]] = shift @input; $addr += 2; },
        # Opcode 4, output
        sub { push @output, &$pmode(0,$_[0]); $addr += 2; },
        # Opcode 5, jump if true
        sub { if (&$pmode(0,$_[0]) != 0) { $addr = &$pmode(1,$_[1]); }
              else { $addr += 3; } },
        # Opcode 6, jump if false
        sub { if (&$pmode(0,$_[0]) == 0) { $addr = &$pmode(1,$_[1]); }
              else { $addr += 3; } },
        # Opcode 7, less than
        sub { $pgm[$_[2]] = int(&$pmode(0,$_[0]) < &$pmode(1,$_[1]));
              $addr += 4; },
        # Opcode 8, equals
        sub { $pgm[$_[2]] = int(&$pmode(0,$_[0]) == &$pmode(1,$_[1]));
              $addr += 4; },
        );

    while ($pgm[$addr] != 99) {
        my $opcode = $pgm[$addr];

        # Parse the parameter modes
        @modes = split //, reverse int($opcode / 100);
        $opcode %= 100;

        # Get parameters
        my (@params) = @pgm[$addr+1..$addr+3];

        &{$opcodes[$opcode]}(@params);
    }
    return @output;
}

# Get input
my (@program) = map { int } split /,/, <>;

my %tries = ('' => 0);
for (1..5) {    # 5 amplifiers
    my %new_tries;
    while (my ($prior_phases, $input) = each %tries) {
        my @priors = split //, $prior_phases;
        # Try all phases that were not already run in prior_phases
        foreach my $phase (grep { my $num = $_;
                                  not grep { $_ == $num } @priors;
                           } 0, 1, 2, 3, 4) {
            my ($output) = &run(\@program, [$phase, $input]);
            $new_tries{"${prior_phases}${phase}"} = $output;
        }
    }
    %tries = %new_tries;
}

# Find the highest signal
my $answer = (sort { $a <=> $b } values %tries)[-1];
print "${answer}\n";
