#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

# ------------------------------------------------------------------------------
#  Recursive function to generate all permutations of a list. Arguments are a
#  bit funky, so a wrapper is provided to make it easy.
# ------------------------------------------------------------------------------
sub permute_r {
    my @l = @{+shift};
    my @s = @{+shift};
    my @r;
    push @r, [@s] if not @l;
    foreach (0..$#l) {
        push @s, shift @l;
        push @r, &permute_r([@l], [@s]);
        push @l, pop @s;
    }
    return @r;
}
# Wrapper for your protection
sub permute {
    &permute_r([ @_ ], []);
}

# ------------------------------------------------------------------------------
#  Run the "Intcode computer". This variant accepts a hash reference with keys
#  for the computer memory, input, and address of execution. Hash contents will
#  be modified as the computer runs. Rather than waiting for the program to
#  terminate, as soon as output is generated, it will be returned. If the
#  caller adds more input to the hash, it is thus possible to resume execution
#  where it left off.
# ------------------------------------------------------------------------------
sub run {
    my ($href) = @_;
    my $pgm   = $$href{'memory'};       # 'memory' and 'input' keys are array
    my $input = $$href{'input'};        # references, so just copy those.
    my $addr  = \$$href{'address'};     # 'address' is a scalar, so make a ref

    my @modes;      # Parameter modes, set as each opcode is processed
    my $output;     # Collect program output

    # Function to handle parameter modes
    my $pmode = sub {
        my ($moderef, $param) = @_;
        my $mode = $modes[$moderef] // 0;   # Look up the mode
        if ($mode == 0) {
            return $$pgm[$param];           # "Position mode"
        } elsif ($mode == 1) {
            return $param;                  # "Immediate mode"
        } else {
            die "Bad mode: \"${mode}\"";
        }
    };

    # Mapping of opcodes to implementation.
    my @opcodes = (
        # There is no opcode 0
        undef,
        # Opcode 1, addition
        sub { $$pgm[$_[2]] = &$pmode(0,$_[0]) + &$pmode(1,$_[1]); $$addr += 4; },
        # Opcode 2, multiplication
        sub { $$pgm[$_[2]] = &$pmode(0,$_[0]) * &$pmode(1,$_[1]); $$addr += 4; },
        # Opcode 3, input
        sub { $$pgm[$_[0]] = shift @$input; $$addr += 2; },
        # Opcode 4, output
        sub { $output = &$pmode(0,$_[0]); $$addr += 2; },
        # Opcode 5, jump if true
        sub { if (&$pmode(0,$_[0]) != 0) { $$addr = &$pmode(1,$_[1]); }
              else { $$addr += 3; } },
        # Opcode 6, jump if false
        sub { if (&$pmode(0,$_[0]) == 0) { $$addr = &$pmode(1,$_[1]); }
              else { $$addr += 3; } },
        # Opcode 7, less than
        sub { $$pgm[$_[2]] = int(&$pmode(0,$_[0]) < &$pmode(1,$_[1]));
              $$addr += 4; },
        # Opcode 8, equals
        sub { $$pgm[$_[2]] = int(&$pmode(0,$_[0]) == &$pmode(1,$_[1]));
              $$addr += 4; },
        );

    while ($$pgm[$$addr] != 99) {
        my $opcode = $$pgm[$$addr];

        # Parse the parameter modes
        @modes = split //, reverse int($opcode / 100);
        $opcode %= 100;

        # Get parameters
        my (@params) = @$pgm[$$addr+1..$$addr+3];

        # Execute this opcode
        &{$opcodes[$opcode]}(@params);

        # Manage output
        return $output if $output;
    }
    return undef;
}

# Get input
my (@program) = map { int } split /,/, <>;

# Loop over all permutations of the set {5, 6, 7, 8, 9}
my $answer = -(~0>>1)-1;                # Initialize to the lowest possible int
foreach my $iter (&permute(5..9)) {
    # Initialize the amplifiers
    my @amps = map { { 'memory'  => [ @program ],
                       'input'   => [ $_ ],
                       'address' => 0 } } @$iter;
    push @{ $amps[0]{'input'} }, 0;     # Add the initial input

    my $output;
  LOOP:
    while (1) {
        foreach my $i (0..$#amps) {
            my $intermediate = &run($amps[$i]);
            if (defined $intermediate) {
                push @{ $amps[($i+1) % @amps]{'input'} }, $intermediate;
                # Save output from the last amplifier
                $output = $intermediate if $i == $#amps;
            } else {
                last LOOP;
            }
        }
    }
    $answer = $output if $output > $answer;
}
print "${answer}\n";
