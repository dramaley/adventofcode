#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';
use Time::HiRes qw(usleep);

# This version of the game plays (with?) itself.


# ------------------------------------------------------------------------------
#  Run the "Intcode computer". This version expects a hash reference to contain
#  the computer state. The state will be modified as the computer runs.
# ------------------------------------------------------------------------------
sub run {
    my ($href) = @_;
    my $memory   = $$href{'memory'};    # Array references, so just copy them.
    my $input    = $$href{'input'};
    my $inst_ptr = \$$href{'address'};  # These are scalars, so make references
    my $rel_base = \$$href{'base'};

    # Make sure these were initialized
    $$inst_ptr //= 0;
    $$rel_base //= 0;

    my @modes;      # Parameter modes, set as each opcode is processed
    my @output;     # Collect program output

    # Function to handle parameter modes
    my $pmode = sub {
        my ($moderef, $param) = @_;
        my $mode = $modes[$moderef] // 0;   # Look up the mode
        if ($mode == 0) {                   # "Position mode"
            return $$memory[$param] // 0;
        } elsif ($mode == 1) {              # "Immediate mode"
            return $param;
        } elsif ($mode == 2) {              # "Relative mode"
            return $$memory[$param + $$rel_base] // 0;
        } else {
            die "Bad mode: \"${mode}\"";
        }
    };
    # Handle relative mode offset when saving a value
    my $offset = sub {
        my ($moderef) = @_;
        return $modes[$moderef] // 0 == 2 ? $$rel_base : 0;
    };

    # Mapping of opcodes to implementation.
    my @opcodes = (
        # There is no opcode 0
        sub { die 'Invalid opcode 0'; },
        # Opcode 1, addition
        sub { $$memory[$_[2]+&$offset(2)] = &$pmode(0,$_[0]) + &$pmode(1,$_[1]);
              $$inst_ptr += 4; },
        # Opcode 2, multiplication
        sub { $$memory[$_[2]+&$offset(2)] = &$pmode(0,$_[0]) * &$pmode(1,$_[1]);
              $$inst_ptr += 4; },
        # Opcode 3, input
        sub { $$memory[$_[0]+&$offset(0)] = shift @$input; $$inst_ptr += 2; },
        # Opcode 4, output
        sub { push @output, &$pmode(0,$_[0]); $$inst_ptr += 2; },
        # Opcode 5, jump if true
        sub { if (&$pmode(0,$_[0]) != 0) { $$inst_ptr = &$pmode(1,$_[1]); }
              else { $$inst_ptr += 3; } },
        # Opcode 6, jump if false
        sub { if (&$pmode(0,$_[0]) == 0) { $$inst_ptr = &$pmode(1,$_[1]); }
              else { $$inst_ptr += 3; } },
        # Opcode 7, less than
        sub { $$memory[$_[2]+&$offset(2)] = int(&$pmode(0,$_[0]) < &$pmode(1,$_[1]));
              $$inst_ptr += 4; },
        # Opcode 8, equals
        sub { $$memory[$_[2]+&$offset(2)] = int(&$pmode(0,$_[0]) == &$pmode(1,$_[1]));
              $$inst_ptr += 4; },
        # Opcode 9, adjust the relative base offset
        sub { $$rel_base += &$pmode(0,$_[0]); $$inst_ptr += 2; },
        );

    while ($$memory[$$inst_ptr] != 99) {
        my $opcode = $$memory[$$inst_ptr] // 0;

        # Parse the parameter modes
        @modes = split //, reverse int($opcode / 100);
        $opcode %= 100;

        # Get parameters
        my (@params) = map { $_ // 0 } @$memory[$$inst_ptr+1..$$inst_ptr+3];

        # Bail out if input required but not available
        last if $opcode == 3 and not @$input;

        # Execute this opcode
        &{$opcodes[$opcode]}(@params);

        # 3 outputs implies a tile has been displayed
#        last if @output == 3;
    }
    return @output;
}

# ----------------
#  Initialization
# ----------------

# Cheater code to clear the screen with ANSI codes; the more proper and portable
# way would be to use Term::Cap, initialize it, and retrieve the 'cl' command.
our $clear = "\033[H\033[2J";

# What to display for each type of tile id
our @tiles = (' ',  # empty
              '#',  # wall
              '*',  # block
              '=',  # horizontal paddle
              'O'); # ball

# Get input
my (@memory) = map { int } split /,/, <>;
$memory[0] = 2; # Play for free
my %program = ('memory' => \@memory, 'input'  => []);

# ------
#  Main
# ------

# Run the game
my (@grid, $score);
while (1) {
    my (@output) = &run(\%program);
    last if not @output;  # All done

    # Update the game board and score
    while (@output) {
        my ($col, $row, $tile) = splice(@output, 0, 3);
        if ($col == -1 and $row == 0) {
            $score = $tile;
        } else {
            $grid[$row][$col] = $tile;
        }
    }

    # Display the game board
    print $clear;
    print(map { join('', @$_, "\n") }       # Convert row to string
          map { [map { $tiles[$_] } @$_] }  # Map row to printable chars
          @grid);

    # Find X position of the ball (4) and the paddle (3)
    my ($ball, $paddle);
    foreach my $row (@grid) {
        foreach my $col (0..$#$row) {
            if ($$row[$col] == 3) {
                $paddle = $col;
            } elsif ($$row[$col] == 4) {
                $ball = $col;
            }
        }
    }
    my $joystick = $ball <=> $paddle;
    push @{$program{'input'}}, $joystick;

    # Slow down time
    usleep(50000);
}
print "Score: ${score}\n";
