#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

our @input = sort { $a <=> $b } map { chomp; $_ } <>;
unshift @input, 0;              # Source
push @input, $input[-1] + 3;    # Built-in adapter

# Simplify the input into a list of differences. Note that the samples and real
# input only have differences of 1 or 3, there are no 2's! How convenient! We'll
# take advantage of that fact to simplify the problem. Note that this is thus
# not a general solution for problems of this type, only ones that are as simple
# as the problem given.
our @diffs = map { $input[$_+1]-$input[$_] } 0..$#input-1;

# How many ways are there to traverse the list? Note that a single "3" creates a
# choke point where all paths must traverse the same way. So break up the list
# into a number of smaller chains consisting of just the 1's. All we really
# need from there is the length of each sub-chain. And can ignore single links
# since they cannot increase the total path count.
our @chain_lengths = ( grep { $_ > 1 }          # Discard single-links
                       map { length $_ }        # Length of this sub-chain
                       split /3+/,              # Split on 3's
                       join('', @diffs) );      # List to string to use split

# Relate length of a sub-chain to the number of possible paths through it.
# These relations were found by mapping them manually, shown in the comments.
# The input never has a chain of length greater than 4, so there's no need to
# go beyond that. 5 was included just to show how this pattern increases.
our %mapping = ( '1' => 1,      # 1
                 '2' => 2,      # 1+1, 2
                 '3' => 4,      # 1+1+1, 1+2, 2+1, 3
                 '4' => 7,      # 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2, 1+3, 3+1
                 '5' => 13 );   # 1+1+1+1+1, 1+1+1+2, 1+1+2+1, 1+2+1+1, 2+1+1+1,
                                # 1+2+2, 2+1+2, 2+2+1, 1+1+3, 1+3+1, 3+1+1,
                                # 2+3, 3+2

# Now process the chain lengths to get the answer
my $product = 1;
$product *= $mapping{$_} foreach @chain_lengths;
print "${product}\n";
