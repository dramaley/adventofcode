#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

# Read ordering rules and build the tests used for sorting
our (%rules, %tests);
while (<>) {
    last if not m/^(\d+)\|(\d+)$/;
    my $key = qr/(?=.*\b$1\b)(?=.*\b$2\b)/;
    my $val = qr/\b$1\b.+\b$2\b/;
    $rules{$key} = $val;
    $tests{"$1,$2"} = -1;
    $tests{"$2,$1"} = 1;
}

my $mids = 0;
# Read page numbers for each update
foreach my $line (<>) {
    # Make sure this line is *not* valid
    my (@keys) = grep { $line =~ /$_/ } keys %rules;
    my $valid = 1;  # Assume valid until proven otherwise.
    foreach my $key (@keys) {
        if ($line !~ /${rules{$key}}/) {
            $valid = 0;
            last;
        }
    }
    next if $valid;

    # Sort the line
    chomp $line;
    sub sorter { $tests{"$a,$b"} or $tests{"$b,$a"} or undef }
    my (@numbers) = sort sorter split /,/, $line;

    # Save the middle value
    $mids += $numbers[$#numbers / 2];
}

print "${mids}\n";
