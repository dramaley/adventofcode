#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';
use Array::Heap::PriorityQueue::Numeric;

# This runs in about half the time as the initial Part 2 solution, by retaining
# $count from Part 1 and dropping that many bytes right away before even trying
# to solve.

our ($max, $count, @grid);
if (1) {                # True for real input, false for test input
    $max = 70;          # Grid size
    $count = 1024;      # How much of the input to process
} else {
    $max = 6;
    $count = 12;
}

# Find the shortest path through the grid and return its length.
# Will return a very large number (~0) if no solution was found.
sub solver {
    my $solution = ~0;                  # Assume infinity
    my $pq = Array::Heap::PriorityQueue::Numeric->new();
    $pq->add([ 0, 0, 0 ], 0); # Item is row, column, cost
    my %seen;
    while (my $entry = $pq->get()) {
        my ($row, $col, $cost) = @$entry;
        next if $seen{"${row},${col}"} // ~0 < $cost; # No point in continuing
        $seen{"${row},${col}"} = $cost;
        if ($row == $max and $col == $max) {    # Check for solution
            $solution = $cost if $cost < $solution;
            next;
        }
        # Try each direction from here
        foreach ([$row, $col-1], [$row, $col+1], [$row-1, $col], [$row+1, $col]) {
            my ($r, $c) = @$_;
            next if $r < 0 or $r > $max or $c < 0 or $c > $max;
            next if $grid[$r][$c] eq '#';
            $pq->add([ $r, $c, $cost + 1 ], $cost + 1);
        }
    }
    return $solution;
}

# Read input
@grid = map { [('.') x ($max + 1) ] } 0..$max;
while (my $line = <>) {
    chomp $line;
    my ($col, $row) = split /,/, $line;
    $grid[$row][$col] = '#';

    next if $. <= $count;       # Keep dropping bytes until $count have fallen

    if (&solver == ~0) {
        print "${line}\n";
        last;
    }
}
