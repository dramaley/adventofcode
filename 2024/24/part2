#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

our (%rules, %reversed);

# ------------------------------------------------------------------------------
#  Make a key from 2 gates and an operator
# ------------------------------------------------------------------------------
sub make_key {
    my ($a, $b, $op) = @_;
    ($a, $b) = sort $a, $b;     # All operators are commutative
    return "${a},${b},${op}";
}

# ------------------------------------------------------------------------------
#  Find the maximum of a list of numbers
# ------------------------------------------------------------------------------
sub max { (sort { $a <=> $b } @_)[-1] }

# ------------------------------------------------------------------------------
#  This is the symmetric difference from set theory, and basically acts like a
#  XOR operator for lists. Takes 2 list references, returns a list reference.
# ------------------------------------------------------------------------------
sub set_xor {
    my ($a, $b) = @_;
    my %all;
    $all{$_} |= 1 foreach @$a;  # Set the 1 bit
    $all{$_} |= 2 foreach @$b;  # Set the 2 bit
    # Return entries that don't have both 1 & 2 bits set
    return [ sort grep { $all{$_} != 3 } keys %all ];
}

# ------------------------------------------------------------------------------
#  Swap wires
# ------------------------------------------------------------------------------
sub swap {
    my ($a, $b) = @_;
    @reversed{$a, $b} = @reversed{$b, $a};
    @rules{@reversed{$a, $b}} = @rules{@reversed{$b, $a}};
}

# ------------------------------------------------------------------------------
#  Main
# ------------------------------------------------------------------------------

# Read input
while (<>) {
    # Only process lines that express rules
    next if not m/^(\w+) (AND|OR|XOR) (\w+) -> (\w+)$/;
    my ($a, $op, $b, $result) = ($1, $2, $3, $4);
    my $key = &make_key($a, $b, $op);
    $rules{$key} = $result;
    $reversed{$result} = $key;
}

my @output;
my $c = '';
my $range = &max(map { /^z(\d+)$/ ? $1 : () } keys %reversed);
for (my $i = 0; $i < $range; $i++) {    # Runs 0..44 with the given input
    my $x = sprintf('x%02d', $i);
    my $y = sprintf('y%02d', $i);
    my $z = sprintf('z%02d', $i);
    my $x_and_y = $rules{&make_key($x, $y, 'AND')};
    my $x_xor_y = $rules{&make_key($x, $y, 'XOR')};
    if (not $c) {
        $c = $x_and_y;
        next;
    }
    my ($a, $b) = sort $c, $x_xor_y;
    my $key = &make_key($a, $b, 'XOR');
    if (not exists $rules{$key}) {
        ($a, $b) = @{ &set_xor([(split /,/, $reversed{$z})[0,1]], [$a, $b]) };
        push @output, $a, $b;
        &swap($a, $b);
    } elsif ($rules{$key} ne $z) {
        push @output, $rules{$key}, $z;
        &swap($rules{$key}, $z);
    }
    # Regenerate these after swaps have taken place
    $x_and_y = $rules{&make_key($x, $y, 'AND')};
    $x_xor_y = $rules{&make_key($x, $y, 'XOR')};

    $c = $rules{&make_key($c, $x_xor_y, 'AND')};
    $c = $rules{&make_key($c, $x_and_y, 'OR')};
}
print join(',', sort @output), "\n";
