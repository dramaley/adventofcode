#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

# Initialization
our (@map) = map { chomp; [ split // ]; } <>;
our $max_row = $#map;
our $max_col = $#{$map[0]};

# ------------------------------------------------------------------------------
#  Given (row, column) of a garden plot, find all adjoining plots of the same
#  type and find the area and perimeter.
# ------------------------------------------------------------------------------
sub region {
    my ($row, $col) = @_;

    my ($area, $perimeter);
    my $type = $map[$row][$col];
    my (@queue) = ([$row, $col]);
    my (%seen, %perimeter_seen);
    while (@queue) {
        my ($r, $c) = @{shift @queue};
        # Already been here
        next if $map[$r][$c] ne $type;
        # Mark this plot visited
        $area++;
        $map[$r][$c] = '.';
        $seen{"${r},${c}"}++;
        # Explore neighboring plots
        foreach ([$r, $c-1, 'n'], [$r, $c+1, 's'],
                 [$r-1, $c, 'w'], [$r+1, $c, 'e']) {
            my ($new_r, $new_c, $direction) = @$_;
            # Don't count previously visited plots
            next if $seen{"$new_r,$new_c"};
            # Boundary detection
            if ($new_r < 0 or $new_r > $max_row or  # Row out of bounds
                $new_c < 0 or $new_c > $max_col or  # Column out of bounds
                $map[$new_r][$new_c] ne $type) {    # Neighbor is different type
                # Check for known boundaries that connect to this one
                my $adjacent_edges = 0;
                if ($direction =~ /^[ns]$/) {
                    my $key_west = join(',', $new_r-1, $new_c, $direction);
                    my $key_east = join(',', $new_r+1, $new_c, $direction);
                    $adjacent_edges++ if $perimeter_seen{$key_west};
                    $adjacent_edges++ if $perimeter_seen{$key_east};
                } else {
                    my $key_north = join(',', $new_r, $new_c-1, $direction);
                    my $key_south = join(',', $new_r, $new_c+1, $direction);
                    $adjacent_edges++ if $perimeter_seen{$key_north};
                    $adjacent_edges++ if $perimeter_seen{$key_south};
                }
                # This could use some explanation...
                # If 0 adjacent edges were found, then this one is new, so
                # increment the perimeter. If 1 was found, then we're expanding
                # an already-known edge, so add 0. If 2 were found, then we're
                # connecting two known edges, which means the perimeter count is
                # too high and needs to be decremented.
                $perimeter += (1 - $adjacent_edges);
                # Mark this edge as seen
                $perimeter_seen{"${new_r},${new_c},${direction}"}++;
                next;
            }
            # Neighbor is the same plot type; add it to the queue
            push @queue, [$new_r, $new_c];
        }
    }
    return $area * $perimeter;
}

# Main loop
my $sum = 0;
foreach my $row (0..$max_row) {
    foreach my $col (0..$max_col) {
        next if $map[$row][$col] eq '.';
        $sum += &region($row, $col);
    }
}
print "${sum}\n";
