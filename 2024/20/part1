#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';
use Array::Heap::PriorityQueue::Numeric;

# Read input
our (@grid, $start_row, $start_col);
while (<>) {
    chomp;
    push @grid, [ split // ];
    if (m/S/g) {        # Found the start position
        $start_row = $. - 1;
        $start_col = pos() - 1;
    }
}

# Solve the maze, retaining the path info
# @path is a list of coordinates that make up the path.
# %loc2dist associates each coordinate with the cost to get there.
our (@path, %loc2dist);
{   my $solution = ~0;                      # Assume infinity
    my $pq = Array::Heap::PriorityQueue::Numeric->new();
    my %seen = ("${start_row},${start_col}" => 'start');
    $pq->add([$start_row, $start_col, 0], 0);
    my ($row, $col, $cost);
    while (my $entry = $pq->get()) {
        ($row, $col, $cost) = @$entry;
        next if $cost >= $solution;                     # No point in continuing
        last if $grid[$row][$col] eq 'E';               # Solved it!
        foreach ([0, -1], [0, 1], [-1, 0], [1, 0]) {    # Try moving every way
            my ($row_delta, $col_delta) = @$_;
            my $new_row = $row + $row_delta;
            my $new_col = $col + $col_delta;
            next if $seen{"${new_row},${new_col}"};     # Been there, done that
            next if $grid[$new_row][$new_col] eq '#';   # Wall
            $seen{"${new_row},${new_col}"} = "${row},${col}";
            my $new_cost = $cost + 1;
            $pq->add([$new_row, $new_col, $new_cost], $new_cost);
        }
    }

    # Now trace backwards in order to build the path
    my $last = "${row},${col}";
    do {
        # Save info for this location
        $loc2dist{$last} = $cost;
        unshift @path, [$row, $col];
        # Backtrack to the previous location
        $last = $seen{$last};
        ($row, $col) = split ',', $last;
        $cost--;
    } until $last eq 'start';
}

# Search for *ahem* shortcuts
my %cheats;
foreach (@path) {
    my ($row, $col) = @$_;
    my $distance = $loc2dist{"${row},${col}"};
    foreach ([0, -2], [0, 2], [-2, 0], [2, 0]) {
        my ($row_delta, $col_delta) = @$_;
        my $new_row = $row + $row_delta;
        my $new_col = $col + $col_delta;
        next if not exists $loc2dist{"${new_row},${new_col}"};  # Off track
        my $new_distance = $loc2dist{"${new_row},${new_col}"};
        my $saved = $new_distance - $distance - 2;
        $cheats{"${row},${col},${new_row},${new_col}"} = $saved
            if $saved > 0;
    }
}

# Count how many cheats save at least 100 steps
my $sum = grep { $cheats{$_} >= 100 } keys %cheats;
print "${sum}\n";
