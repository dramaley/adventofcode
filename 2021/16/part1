#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

our $version_sum = 0;


# ------------------------------------------------------------------------------
#  Given a scalar reference and number of bits, remove that number of bits from
#  the front of the string and return them. Note that "bits" actually refers to
#  characters, since the scalar is expected to be a string consisting entirely
#  of "0"s and "1"s.
# ------------------------------------------------------------------------------
sub get_bits {
    my ($sref, $bits) = @_;
    return substr($$sref, 0, $bits, '');
}

# ------------------------------------------------------------------------------
#  Given a scalar reference and number of bits, remove that number of bits from
#  the front of the string, convert them to a normal integer, and return the
#  result. Note that "bits" actually refers to characters.
# ------------------------------------------------------------------------------
sub get_num {
    return oct('0b' . &get_bits(@_));
}

# ------------------------------------------------------------------------------
#  Parse a packet. The code here is going to be a bit esoteric as it tries to
#  match the obtuse packet format described in the problem.
# ------------------------------------------------------------------------------
sub persnickety_packet_parser {
    my ($string) = @_;

    my $version = &get_num(\$string, 3);
    $version_sum += $version;           # Needed for Part 1
    my $typeid = &get_num(\$string, 3);
    if ($typeid == 4) {
        # Process a literal value
        my $value = 0;
        my $next;
        do {
            $next = &get_bits(\$string, 1);
            $value <<= 4;
            $value += &get_num(\$string, 4);
        } while $next == 1;
#        print "Literal value: ${value}\n";
    } else {
        # Process an operator
        my $length_type_id = &get_bits(\$string, 1);
        if ($length_type_id) {
            # "1" means the next 11 bits represents the number of sub-packets
            # contained by this packet.
            my $sub_count = &get_num(\$string, 11);
            $string = &persnickety_packet_parser($string)
                foreach 0..$sub_count;
        } else {
            # "0" means the next 15 bits represent the total length in bits of
            # the sub-packets contained by this packet
            my $sub_bits = &get_num(\$string, 15);
            my $sub_packet = &get_bits(\$string, $sub_bits);
            $sub_packet = &persnickety_packet_parser($sub_packet)
                while $sub_packet;
        }
    }

    # Return whatever's left
    return $string;
}


# Read input
our ($input) = map { chomp; $_; } <>;

# Convert hexadecimal input to a binary string. Conversion is done by character
# rather than all at once to avoid overflow.
our $binary = join('', map { sprintf '%04b', hex } split //, $input);

# Process it!
$binary = &persnickety_packet_parser($binary);

#print "Leftovers: $binary\n";
print "$version_sum\n";
