#!/usr/bin/perl

use 5.8.1;
use strict;
use utf8;                               # Source contains UTF-8
use open ':std', ':encoding(UTF-8)';    # The terminal supports UTF-8
use warnings 'all';

my @coords;
{   # Read input to get a list of coordinates
    my ($row, $col) = (0) x 2;
    my %directions = ('U' => [ -1, 0 ], 'D' => [ 1, 0 ],
                      'L' => [ 0, -1 ], 'R' => [ 0, 1 ]);
    while (<>) {
        m/^.+#([[:xdigit:]]+)([[:xdigit:]])\)/;
        my $distance = hex($1);
        my $direction = ('R', 'D', 'L', 'U')[$2];

        my ($row_dir, $col_dir) = @{$directions{$direction}};
        $row += $row_dir * $distance;
        $col += $col_dir * $distance;
        push @coords, [$row, $col];
    }
}

# Find the minimum/maximum of a list of numbers
sub min { return (sort { $a <=> $b } @_)[0]; }
sub max { return (sort { $a <=> $b } @_)[-1]; }

{   # Translate coordinates so there aren't any negative numbers.
    my $row_offset = (sort { $a <=> $b } map { $$_[0] } @coords)[0];
    my $col_offset = (sort { $a <=> $b } map { $$_[1] } @coords)[0];
    foreach (@coords) {
        $$_[0] -= $row_offset;
        $$_[1] -= $col_offset;
    }
}

# Convert our coordinates into line segments, then sort
my @segments;
for (my $i = 0; $i < @coords; $i++) {
    my ($one, $two) = sort { $coords[$a][0] <=> $coords[$b][0] or
                             $coords[$a][1] <=> $coords[$b][1] } ($i, $i-1);
    push @segments, [ @{$coords[$one]}, @{$coords[$two]} ];
}
@segments = sort { &max(@{$a}[0,2]) <=> &max(@{$b}[0,2]) or # Sort by row
                   &min(@{$a}[0,2]) <=> &min(@{$b}[0,2]) or
                   &max(@{$a}[1,3]) <=> &max(@{$b}[1,3]) or # Then by column
                   &min(@{$a}[1,3]) <=> &min(@{$b}[1,3]) } @segments;

# Get a list of rows where stuff happens
my @important_rows;
{   my %seen;
    @important_rows = (sort { $a <=> $b }       # And sort it
                       grep { !$seen{$_}++ }    # Unique items only
                       map { $$_[0] => 0 }      # Extract the row
                       @coords);
}

print map { "\t(" . join(', ', @$_) . ")\n" } @coords;
print map { join("\t", @$_) . "\n" } @segments;
print map { "$_\n" } @important_rows;


foreach my $row (@important_rows) {
#    while ($segments[0][2] < $row) {    # Lowest segment is in the past
#        print "Deleting segment.\n";
#        shift @segments;
#    }

    # Find segments that intersect the current line
    my @important_segments =
	(sort { &max(@{$a}[1,3]) <=> &max(@{$b}[1,3]) or    # Sort by column
		&min(@{$a}[1,3]) <=> &min(@{$b}[1,3]) }
	 grep { $$_[0] <= $row } @segments);


# just figure out how many points in the current row we care about.
# then... find @important_elements for $row+1.
#         figure out how many points in that row.
#         multiply by the distance to the next row


print "Important segments:\n";
print map { join("\t", @$_) . "\n" } @important_segments; exit;

}
