#!/usr/bin/perl

use 5.14.1;
use strict;
use warnings 'all';
use experimental 'smartmatch';

our (@coords, @segments, @important_rows);

# ------------------------------------------------------------------------------
#  Functions
# ------------------------------------------------------------------------------

# Given a reference to a horizontal line segment, and references to a list of
# segments that may share a vertex, determine if the segment is a crossing for
# the ray-casting algorithm.
sub is_crossing {
    my ($my_segment, @segments) = @_;
    # What row are we in? And what columns?
    my $row = $$my_segment[0];
    my @cols = @{$my_segment}[1, 3];
    # Find the 2 vertical segments that connect with one of the endpoints of
    # $my_segment. We know they'll be vertical lines, and all we care about is
    # the row number of their other end, the end not in the current row.
    my @verties = (sort { $a <=> $b }   # No explanation required
                   grep { $_ != $row }  # Ignore the current row
                   map { @{$_}[0,2] }   # Pull out just the row numbers
                   # Get the segments that intersect
                   grep { (($$_[0] eq $row and $$_[1] ~~ @cols) xor
                           ($$_[2] eq $row and $$_[3] ~~ @cols)) }
                   @segments);
    # True if the vertices are on opposite sides of our segment. Meaning: our
    # segment is part of a wavy crossing that ray-casting has to worry about.
    return ($verties[0] < $row and $row < $verties[1]);
}

# Find the minimum/maximum of a list of numbers
sub max { return (sort { $a <=> $b } @_)[-1]; }
sub min { return (sort { $a <=> $b } @_)[0]; }

# This is really where the magic happens. Given a row number on the map, figure
# out how many dug holes there are and return that. Note that this will slowly
# destroy @segments as it operates, so only make calls to it in ascending order.
sub process_row {
    my ($row) = @_;
    my $sum = 0;

    # Delete segments that have already been fully processed.
    shift @segments while $segments[0][2] < $row;

    # Find segments that intersect the current line
    # Be careful with changes to sorting; foreach loop depends on the order.
    my @important_segments =
        (sort { ($$b[0] == $$b[2]) <=> ($$a[0] == $$a[2]) or# Horizontal lines
                &max(@{$a}[1,3]) <=> &max(@{$b}[1,3]) or    # Sort verticals by
                &min(@{$a}[1,3]) <=> &min(@{$b}[1,3]) }     # \ column
         grep { $$_[0] <= $row } @segments);

    # @points contains a list of columns where vertical lines cross this row.
    # @ranges is a list of horizontal segments in this row, where for each one
    # store the columns of the endpoints and whether the segment is a crossing.
    my (@points, @ranges);
    foreach my $segment (@important_segments) {
        if ($row == $$segment[0] and $row == $$segment[2]) {
            # Process a horizontal line
            push @ranges, [ @{$segment}[1,3],
                            &is_crossing($segment, @important_segments) ];
            $sum += $$segment[3] - $$segment[1] + 1;
        } elsif (not $row ~~ @{$segment}[0,2]) {
            # Process a vertical line that does not have a vertex in this row.
            # Just save the column number for later. Note that as a vertical,
            # we only need 1 of the points' column, since they are identical.
            # Thank goodness this problem doesn't have diagonals...
            push @points, $$segment[1];
        } else {
            # Vertical lines that do have a vertex in this row end up here.
            # But... we don't care about them since they connect with a
            # horizontal's endpoints, which has already been processed.
        }
    }

    # Process the line crossings, left-to-right across the current row, and
    # determine how many points should be included in the final sum.
    my $inside = 0;     # Whether we're inside the shape
    while (@points or @ranges) {
        # The current thing to examine is a point
        if (($points[0] // ~0) < ($ranges[0] ? $ranges[0][0] : ~0)) {
            # Determine if the next thing after this one is a point or a range
            if (($points[1] // ~0) < ($ranges[0] ? $ranges[0][0] : ~0)) {
                $sum += $points[1] - $points[0] + 1;
                shift @points; shift @points;
            } elsif (@{$ranges[0]}) {
                # No "+ 1" here because the range was already counted
                $sum += $ranges[0][0] - $points[0];
                shift @points;
                if ($ranges[0][2]) {    # Range is crossing
                    shift @ranges;
                } else {                # Non-crossing
                    $inside = 1;        # Mark that we're "inside" the field
                }
            } else {
                die 'Programmer screwed up';
            }
        }
        # The current thing to examine is a crossing range
        elsif (@{$ranges[0]} and $ranges[0][2]) {
            # Check if the next thing is a point
            if (($points[0] // ~0) < ($ranges[1] ? $ranges[1][0] : ~0)) {
                $sum += $points[0] - $ranges[0][1];
                shift @points;
                shift @ranges;
            } elsif (@{$ranges[1]}) {
                $sum += $ranges[1][0] - $ranges[0][1] - 1;
                shift @ranges;
                if (@{$ranges[0]} and $ranges[0][2]) {  # Range is crossing
                    shift @ranges;
                } else {
                    $inside = 1;
                }
            } else {
                die 'Programmer screwed up... again';
            }
        }
        # The current thing to examine is a non-crossing range
        elsif (@{$ranges[0]} and not $ranges[0][2]) {
            # Process a non-crossing range
            if ($inside) {
                # Check if the next thing is a point
                if (($points[0] // ~0) < ($ranges[1] ? $ranges[1][0] : ~0)) {
                    $inside = 0;
                    $sum += $points[0] - $ranges[0][1];
                    shift @points;
                    shift @ranges;
                } elsif (@{$ranges[1]}) {
                    $sum += $ranges[1][0] - $ranges[0][1] - 1;
                    shift @ranges;
                    if (@{$ranges[0]} and $ranges[0][2]) { # Range is crossing
                        $inside = 0;
                        shift @ranges;
                    }
                } else {
                    die('The current error may or may not be attributable ' .
                        'to one who programs');
                }
            } else {
                # Since we're outside, just skip this one.
                shift @ranges;
            }
        } else {
            die("You're not going to believe this, but guess what? Another " .
                'programmer screw-up. Shocking, i know.');
        }
    }
    return $sum;
}

# ------------------------------------------------------------------------------
# Read input
# ------------------------------------------------------------------------------
{   # Read input to get a list of coordinates
    my ($row, $col) = (0) x 2;
    my %directions = ('U' => [ -1, 0 ], 'D' => [ 1, 0 ],
                      'L' => [ 0, -1 ], 'R' => [ 0, 1 ]);
    while (<>) {
        m/^.+#([[:xdigit:]]+)([[:xdigit:]])\)/;
        my $distance = hex($1);
        my $direction = ('R', 'D', 'L', 'U')[$2];

        my ($row_dir, $col_dir) = @{$directions{$direction}};
        $row += $row_dir * $distance;
        $col += $col_dir * $distance;
        push @coords, [$row, $col];
    }
}

# ------------------------------------------------------------------------------
#  Translate coordinates so there aren't any negative numbers.
# ------------------------------------------------------------------------------
{   my $row_offset = (sort { $a <=> $b } map { $$_[0] } @coords)[0];
    my $col_offset = (sort { $a <=> $b } map { $$_[1] } @coords)[0];
    foreach (@coords) {
        $$_[0] -= $row_offset;
        $$_[1] -= $col_offset;
    }
}

# ------------------------------------------------------------------------------
#  Convert our coordinates into line segments, then sort
# ------------------------------------------------------------------------------
for (my $i = 0; $i < @coords; $i++) {
    my ($one, $two) = sort { $coords[$a][0] <=> $coords[$b][0] or
                             $coords[$a][1] <=> $coords[$b][1] } ($i, $i-1);
    push @segments, [ @{$coords[$one]}, @{$coords[$two]} ];
}
@segments = sort { &max(@{$a}[0,2]) <=> &max(@{$b}[0,2]) or # Sort by row
                   &min(@{$a}[0,2]) <=> &min(@{$b}[0,2]) or
                   &max(@{$a}[1,3]) <=> &max(@{$b}[1,3]) or # Then by column
                   &min(@{$a}[1,3]) <=> &min(@{$b}[1,3]) } @segments;

# ------------------------------------------------------------------------------
#  Get a list of rows where stuff happens
# ------------------------------------------------------------------------------
{   my %seen;
    @important_rows = (sort { $a <=> $b }       # And sort it
                       grep { !$seen{$_}++ }    # Unique items only
                       map { $$_[0] => 0 }      # Extract the row
                       @coords);
}

# ------------------------------------------------------------------------------
#  The Big Loop
# ------------------------------------------------------------------------------
my $sum = 0;
for (my $i = 0; $i < @important_rows; $i++) {
    # This takes care of individual rows that have interesting stuff going on,
    # such as horizontal lines and their resulting intersections.
    $sum += &process_row($important_rows[$i]);

    # If there is another row after the current one, and that row is not
    # already scheduled to be processed, then figure out the area between
    # here and the next row to be processed.
    if (defined $important_rows[$i+1] and
        ($important_rows[$i] + 1) != $important_rows[$i+1]) {
        my $partial = &process_row($important_rows[$i] + 1);
        $partial *= $important_rows[$i+1] - $important_rows[$i] - 1;
        $sum += $partial;
    }
}
print "${sum}\n";
