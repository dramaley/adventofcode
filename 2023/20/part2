#!/usr/bin/perl

use 5.14.1;
use strict;
use warnings 'all';
use experimental 'smartmatch';
use Math::Utils qw/lcm/;

# The %network hash holds our entire state machine. Keys of the hash are the
# names of each module. Value is a hash with keys as follows:
#     type  - Type of module: B = broadcast, % = flip-flop, & = conjunction
#     outs  - List of this module's outputs
#     state - 0 for off/low, 1 for on/high
#     ins   - Hash with keys for each input to the module, values of state for
#             that connection. (Conjunction module only.)
our %network;

# Read input
while (<>) {
    my ($type, $name, @outputs) = m/^([%&]?)(\w+) -> (.+)$/;
    @outputs = split /, /, $outputs[0];
    $type = 'B' if not $type;   # Invent a type for the broadcast module.
    $network{$name} = { 'type' => $type, 'outs' => \@outputs };
    # Set initial state
    $network{$name}{'state'} = 0 if $type =~ m/[%&]/;
}

{   # Check for missing modules and fill them in with a dummy module of type '&'
    # so that its inputs will get filled in when conjunctions are processed.
    my @missing = (grep { not exists $network{$_} }
                   map { @{$network{$_}{'outs'}} }
                   keys %network);
    $network{$_} = { 'type' => '&', 'outs' => [] }
        foreach @missing;
}

# Initialize conjunctions
foreach my $name (keys %network) {
    foreach my $target (@{$network{$name}{'outs'}}) {
        $network{$target}{'ins'}{$name} = 0
            if $network{$target}{'type'} eq '&';
    }
}

# Extra hack for the 'rx' module. It receives input from a single '&' module.
# That module is also an '&' module, but has multiple inputs, each of which are
# also '&' modules. We need to find out when all those inputs will be high
# simultaneously, which will cascade into 'rx' receiving low. Initial testing
# suggests this will end up being a high number of button presses, so we'll do
# a least-common-multiple hack and hope it works.
my $rx_upstream = (keys %{$network{'rx'}{'ins'}})[0];
my %watchers = map { $_ => 0 } keys %{$network{$rx_upstream}{'ins'}};

my $button_presses = 0;
while (1) {
    my @queue = [0, 'broadcaster', '']; # Button push: low pulse to broadcaster
    $button_presses++;
    while (@queue) {
        my ($pulse, $target, $from) = @{ shift @queue };
        my $this = $network{$target};
        for ($$this{'type'}) {
            /%/ and do { # Process a flip-flop.
                next if $pulse == 1;    # Ignore high pulses
                # Toggle state
                my $newstate = $$this{'state'} = 1 - $$this{'state'};
                # Send pulses
                push @queue, map { [$newstate, $_, $target] } @{$$this{'outs'}};
                last; };
            /&/ and do { # Process a conjunction
                $$this{'ins'}{$from} = $pulse;  # Update memory
                my $inputs = 1;                 # "and" the inputs together
                $inputs &= $_ foreach values %{$$this{'ins'}};
                my $output = 1 - $inputs;       # Output is opposite
                # Send pulses
                push @queue, map { [$output, $_, $target] } @{$$this{'outs'}};
                # Second piece of the 'rx' hack
                $watchers{$target} = $button_presses
                    if (exists $watchers{$target} and # If this one matters
                        not $watchers{$target} and    # and hasn't been recorded
                        $output);
                last; };
            /B/ and do { # Process the broadcaster
                push @queue, map { [$pulse, $_, $target] } @{$$this{'outs'}};
                last; };
        }
    }
    last if (scalar values %watchers) == (scalar grep { $_ } values %watchers);
}
print lcm(values %watchers), "\n";
