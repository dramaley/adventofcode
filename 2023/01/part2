#!/usr/bin/perl

my %map = (
    'one' => 1,
    'two' => 2,
    'three' => 3,
    'four' => 4,
    'five' => 5,
    'six' => 6,
    'seven' => 7,
    'eight' => 8,
    'nine' => 9
);
my $pattern = join("|",keys %map);

my $sum = 0;
while (<>) {
    s/(?=(${pattern}))/$map{$1}/g;
    s/^[^\d]*(?=(\d))|.*(\d)[^\d]*$/\1\2/g;
    $sum += $_;
}
print "${sum}\n";

# This relies on the fact that lookahead assertions do not consume characters,
# so then "twone" will be correctly identified as "2" followed by "1".
