#!/usr/bin/perl

use 5.8.1;
use strict;
use warnings 'all';

our $num_steps = 26501365;      # How many steps the elf takes

# Read input
our @grid;
our ($start_row, $start_col);
while (<>) {
    chomp;
    push @grid, [ split // ];
    if (m/S/g) {
        ($start_row, $start_col) = (pos() - 1, $. - 1);
        $grid[$start_row][$start_col] = '.';
    }
}

our $max_row = @grid;
our $max_col = @{$grid[0]};

# Given a number of steps, find how many points on the grid can be reached
sub solver {
    my ($steps) = @_;
    my @positions = ([$start_row, $start_col]);
    foreach my $i (1..$steps) {
        my %new_positions;  # Use a hash to easily avoid duplicates
        foreach my $position (@positions) {
            my ($row, $col) = @$position;
            foreach my $offset ([0,-1], [0,1], [-1,0], [1,0]) {
                my $new_row = $row + $$offset[0];
                my $new_col = $col + $$offset[1];
                $new_positions{$new_row}{$new_col} = 0
                    if $grid[$new_row % $max_row][$new_col % $max_col] eq '.';
            }
        }
        @positions = (map { my $row = $_;
                            map { [$row, $_] } keys %{$new_positions{$row}} }
                      keys %new_positions);
    }
    return scalar @positions;
}

# Period is the width of the grid. Note we're assuming the grid is square.

# Generate 3 points from which we can generate a quadratic formula
my $v1 = &solver($num_steps % $max_row);
my $v2 = &solver($max_row + $num_steps % $max_row);
my $v3 = &solver(2 * $max_row + $num_steps % $max_row);

# Now make the quadratic formula
my $a = ($v1 - 2 * $v2 + $v3) / 2;
my $b = (-3 * $v1 + 4 * $v2 - $v3) / 2;
my $c = $v1;
my $x = int($num_steps / $max_row);

print $a * $x**2 + $b * $x + $c, "\n";
