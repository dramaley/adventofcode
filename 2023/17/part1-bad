#!/usr/bin/perl

use 5.14.1;
use strict;
use warnings 'all';
use experimental 'smartmatch';

# Puzzle input, as a simple 2D array of numbers
our @costs = map { chomp; [ map { $_ + 0 } split // ] } <>;

# Set the last index of the rows/columns to simplify things
our $rows = $#costs;
our $cols = $#{$costs[0]};
# Coordinate of the goal
our $finish = "${rows}_${cols}";
# Start out with a worst-case guess of traversing an entire map of all 9's.
our $guess = ($rows+1) * ($cols+1) * 9;

# The grid will be a 2D array congruent with the puzzle input, but each element
# shall consist of a hash, with hash keys indicating direction and distance of
# possible movements, and values being the cost of that movement plus the
# coordinates of the destination.
our @grid;
foreach my $row (0..$rows) {
    foreach my $col (0..$cols) {
        my %hash = ();
        foreach my $distance (1..3) {
            my ($direction, $new_row, $new_col);
            # North
            $direction = '^';
            $new_row = $row - $distance;
            if ($new_row ~~ [0..$rows]) {   # Check that we're still in bounds
                my $cost = 0;
                my @visited;
                $cost += $_ foreach map { $costs[$_][$col] } ($new_row..($row-1));
                foreach (($new_row+1)..($row-1)) {
                    push @visited, "${_}_${col}";
                }
                $hash{"${direction}${distance}"} =
                    [ $cost, $new_row, $col, @visited ];
            }
            # South
            $direction = 'v';
            $new_row = $row + $distance;
            if ($new_row ~~ [0..$rows]) {   # Check that we're still in bounds
                my $cost = 0;
                my @visited;
                $cost += $_ foreach map { $costs[$_][$col] } (($row+1)..$new_row);
                foreach (($row+1)..($new_row-1)) {
                    push @visited, "${_}_${col}";
                }
                $hash{"${direction}${distance}"} =
                    [ $cost, $new_row, $col, @visited ];
            }
            # East
            $direction = '>';
            $new_col = $col + $distance;
            if ($new_col ~~ [0..$cols]) {   # Check that we're still in bounds
                my $cost = 0;
                my @visited;
                $cost += $_ foreach @{$costs[$row]}[($col+1)..$new_col];
                foreach (($col+1)..($new_col-1)) {
                    push @visited, "${row}_${_}";
                }
                $hash{"${direction}${distance}"} =
                    [ $cost, $row, $new_col, @visited ];
            }
            # West
            $direction = '<';
            $new_col = $col - $distance;
            if ($new_col ~~ [0..$cols]) {   # Check that we're still in bounds
                my $cost = 0;
                my @visited;
                $cost += $_ foreach @{$costs[$row]}[$new_col..($col-1)];
                foreach (($new_col+1)..($col-1)) {
                    push @visited, "${row}_${_}";
                }
                $hash{"${direction}${distance}"} =
                    [ $cost, $row, $new_col, @visited ];
            }
        }
        $grid[$row][$col] = \%hash;
    }
}

# Wander around the grid. Returns a list of costs of making it to the end.
#     $row, $col  - Coordinates of where we are
#     $past_cost  - What it cost to get here
#     $past_dir   - What direction we were moving to get here
#     $history    - Comma-separated list of coordinates to get here.
sub wander {
    my ($row, $col, $past_cost, $past_dir, $history) = @_;

    my $here = "${row}_${col}";
    if ($here eq $finish) {
        print "HERE: ${past_cost}\n";
        $guess = $past_cost if $past_cost < $guess;     # Improve our guess
        return $past_cost;
    }
    return() if $past_cost > $guess;                    # Current path is bad
    return() if $history =~ m/(^|\W)${here}(\W|$)/;     # We've been here before
    $history .= ",${here}";

    my @movements;
    {   my $this = $grid[$row][$col];
        @movements =
            (grep {                     # Exclude if it crosses history
                0 == (scalar grep { $history =~ m/(^|\W)${_}(\W|$)/ }
                      @{$$this{$_}}[3..$#{$$this{$_}}])
             }
             grep { $_ !~ m/${past_dir}/ }  # Don't move the same direction
             keys %$this);                  # Possible movements
    }

    my @ret_vals = ();
    foreach (@movements) {
        my ($new_cost, $new_row, $new_col, @visited) = @{$grid[$row][$col]{$_}};
        push @ret_vals, &wander($new_row, $new_col, $past_cost + $new_cost,
                                substr($_, 0, 1),
                                join(',', $history, @visited));
    }
    # Return the lowest
    return (sort { $a <=> $b } grep { defined; $_ } @ret_vals)[0];
}

my $retval = &wander(0, 0, 0, 'X', 'X'); # "X" is intentionally invalid
print "${retval}\n";
