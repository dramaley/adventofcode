#!/usr/bin/perl
#
# This is my favorite solution to part 2. Uses arrays, performs well. Loose
# enough to still be easy to understand.

use 5.8.1;
use strict;
use warnings 'all';
use Math::Utils qw/lcm/;

our (@instrs, %network);

# ------------------------------------------------------------------------------
#   Given an element, return how many steps it took to solve it
# ------------------------------------------------------------------------------
sub solve {
    my ($key) = @_;
    my $steps = 0;
    $key = $network{$key}[$instrs[$steps++ % @instrs]]
        until $key =~ m/Z$/;
    return $steps;
}


# Read input. Cast to integer isn't necessary but may improve performance.
@instrs = map { tr/LR/01/; int($_) } split //, (<> =~ m/([LR]+)/)[0];
%network = map { /^(\w{3}) = \((\w{3}), (\w{3})\)$/ ? ($1, [$2, $3]) : () } <>;

# Get a list of solutions and find least-common-multiple
my @solutions = map { &solve($_) } grep { /A$/ } keys %network;
print lcm(@solutions), "\n";
