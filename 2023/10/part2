#!/usr/bin/perl
#
# Throughout this code a 2-dimensional array will be used to represent a space.
# (ns, ew) will be used to denote position within the space rather than the more
# conventional (x, y), because the axes differ in orientation from a normal
# graph and use of (x, y) can become confusing. "nw" is the north-south axis,
# with south being the positive direction, and "ew" is the east-west axis, with
# east being positive. This unusual orientation was chosen just because that is
# the most natural way to read in the input.

use 5.14.0;
use strict;
use utf8;                               # Source contains UTF-8
use open ':std', ':encoding(UTF-8)';    # The terminal supports UTF-8
use warnings 'all';
use experimental 'smartmatch';

our @data;

# ------------------------------------------------------------------------------
#  Given our current and previous locations' (i, j) coordinates, find a valid
#  next position and return that coordinate.
# ------------------------------------------------------------------------------
sub next_position {
    my ($curr_ns, $curr_ew, $prev_ns, $prev_ew) = @_;
    my $curr_tile = $data[$curr_ns][$curr_ew];

    # Look north
    if ($curr_tile =~ m/[|LJS]/) {
        my ($next_ns, $next_ew) = ($curr_ns - 1, $curr_ew);
        my $next_tile = $data[$next_ns][$next_ew];
        # Conditional first checks if $next_tile is compatible with $curr_tile,
        # then makes sure we're not backtracking. To detect backtracking we only
        # have to test in the direction of movement (north-south in this case).
        return ($next_ns, $next_ew)
            if $next_tile =~ m/[|7FS]/ and $next_ns != $prev_ns;
    }

    # Look south
    if ($curr_tile =~ m/[|7FS]/) {
        my ($next_ns, $next_ew) = ($curr_ns + 1, $curr_ew);
        my $next_tile = $data[$next_ns][$next_ew];
        return ($next_ns, $next_ew)
            if $next_tile =~ m/[|LJS]/ and $next_ns != $prev_ns;
    }

    # Look east
    if ($curr_tile =~ m/[-LFS]/) {
        my ($next_ns, $next_ew) = ($curr_ns, $curr_ew + 1);
        my $next_tile = $data[$next_ns][$next_ew];
        return ($next_ns, $next_ew)
            if $next_tile =~ m/[-J7S]/ and $next_ew != $prev_ew;
    }

    # Look west
    if ($curr_tile =~ m/[-J7S]/) {
        my ($next_ns, $next_ew) = ($curr_ns, $curr_ew - 1);
        my $next_tile = $data[$next_ns][$next_ew];
        return ($next_ns, $next_ew)
            if $next_tile =~ m/[-LFS]/ and $next_ew != $prev_ew;
    }

    die 'Non-contiguous loop';
}

# ------------------------------------------------------------------------------
#  Given a map location with a path character, make it pretty by substituting
#  with line drawing characters. Note that "S" will pass through.
# ------------------------------------------------------------------------------
sub prettify {
    my ($ns, $ew) = @_;
    $data[$ns][$ew] =~ tr/-|LJ7F/─│└┘┐┌/;
    # Clunkier way that works without "use utf8; use open..." in the headers:
    #my %repl = ('|'=>'│','-'=>'─','L'=>'└','J'=>'┘','7'=>'┐','F'=>'┌',);
    #$data[$ns][$ew] =~ s/([-|LJ7F])/$repl{$1}/;
}

# ------------------------------------------------------------------------------
#   Prettifying the origin requires special care.
# ------------------------------------------------------------------------------
sub prettify_S {
    my ($ns, $ew) = @_;
    my %substitution = ('NS' => '│', 'NE' => '└', 'NW' => '┘',
                        'SE' => '┌', 'SW' => '┐', 'EW' => '─');
    # Determine in which directions we connect to the rest of the path
    my $key = '';
    $key .= ($data[$ns-1][$ew] =~ m/[│┌┐]/) ? 'N' : '';      # North
    $key .= ($data[$ns+1][$ew] =~ m/[│└┘]/) ? 'S' : '';      # South
    $key .= ($data[$ns][$ew+1] =~ m/[─┘┐]/) ? 'E' : '';      # East
    $key .= ($data[$ns][$ew-1] =~ m/[─└┌]/) ? 'W' : '';      # West
    # Substitute the appropriate character
    $data[$ns][$ew] = $substitution{$key};
}


# Read input with extra padding so we don't have to worry about edges
@data = map { chomp; [ '.', split(//), '.' ]; } <>;
unshift @data, [ ('.') x @{$data[0]} ];
push @data, [ ('.') x @{$data[0]} ];

# Find the start
my @start;
{
    my ($ns) = grep { grep { /S/ } @{$data[$_]} } 0..$#data;
    my ($ew) = grep { $data[$ns][$_] eq 'S' } 0..$#{$data[$ns]};
    @start = ($ns, $ew);
}

# Traverse the map until back at the start, prettifying it along the path
my @previous = @start;
my @current = @start;
do {
    my (@next) = &next_position(@current, @previous);
    &prettify(@current);
    @previous = @current;
    @current = @next;
} until @current ~~ @start;
&prettify_S(@start);

# Remove the border to save some processing later
pop @data;
shift @data;
foreach (@data) { pop @$_; shift @$_; }

# Use ray-casting to check each point to see if it is inside or outside
my $count = 0;
foreach my $row (@data) {
    for (my $i = 0; $i < @$row; $i++) {
        # Ignore the path itself
        next if $$row[$i] =~ m/[─│┌┐└┘]/;
        # Extract the path-crossing characters from the remainder of this row.
        # Note this does not include ─, since that is not a path crossing.
        my $path = join('', grep { /[│┌┐└┘]/ } @$row[$i+1..$#$row]);
        # Straighten out wavy crossings so we don't count them twice.
        $path =~ s/(?:┌┘|└┐)/│/g;
        # Odd number of crossings implies the point is inside the path.
        $$row[$i] = (length($path) % 2 ? '.' : ' ');
        $count++ if $$row[$i] eq '.';
    }
}
print "${count}\n";

# Uncomment to print out a prettified version of the map
#print map { join('', @$_)."\n" } @data;
